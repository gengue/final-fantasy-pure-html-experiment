{"version":3,"sources":["cloud.gif","dragon.gif","App.js","serviceWorker.js","index.js"],"names":["module","exports","useKeyPress","targetKey","useState","keyPressed","setKeyPressed","downHandler","key","upHandler","useEffect","window","addEventListener","removeEventListener","Enemy","src","name","number","rest","className","alt","Player","cloud","Hud","selected","id","value","App","count","setCount","upPress","downPress","prev","selectedIndex","useMemo","Math","abs","dragon","style","right","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oJAAAA,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,6MCM3C,SAASC,EAAYC,GAAW,MAEMC,oBAAS,GAFf,mBAEvBC,EAFuB,KAEXC,EAFW,KAK9B,SAASC,EAAT,GAA8B,EAAPC,MACTL,GACVG,GAAc,GAKlB,IAAMG,EAAY,SAAC,GAAY,EAAVD,MACPL,GACVG,GAAc,IAelB,OAVAI,qBAAU,WAIR,OAHAC,OAAOC,iBAAiB,UAAWL,GACnCI,OAAOC,iBAAiB,QAASH,GAE1B,WACLE,OAAOE,oBAAoB,UAAWN,GACtCI,OAAOE,oBAAoB,QAASJ,MAErC,CAACF,EAAaE,IAEVJ,EAGT,SAASS,EAAT,GAAgD,IAA/BC,EAA8B,EAA9BA,IAAKC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,OAAWC,EAAQ,uCAC7C,OACE,uCACEH,IAAKA,EACLI,UAAU,mBACVC,IAAG,UAAKJ,EAAL,aAAcC,IACbC,IAKV,SAASG,EAAT,GAA4C,IAA1BL,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,OAAWC,EAAQ,iCACzC,OACE,uCACEH,IAAKO,IACLH,UAAU,oBACVC,IAAG,UAAKJ,EAAL,aAAcC,IACbC,IAKV,SAASK,EAAT,GAA4B,IAAbC,EAAY,EAAZA,SACb,OACE,2BAAOL,UAAU,UACf,yBAAKA,UAAU,gBACb,4BACE,wBAAIA,UAAU,uBACZ,0BACEA,UAAwB,IAAbK,EAAiB,WAAa,gBAE3C,yCAEF,wBAAIL,UAAU,uBACZ,0BACEA,UAAwB,IAAbK,EAAiB,WAAa,gBAE3C,wCAEF,wBAAIL,UAAU,uBACZ,0BACEA,UAAwB,IAAbK,EAAiB,WAAa,gBAE3C,0CAKN,yBAAKL,UAAU,gBACb,4BACE,wBAAIA,UAAU,uBACZ,0BAAMA,UAAU,gBAChB,0BAAMA,UAAU,QAAhB,SACA,2CACA,2BAAOM,GAAG,cAAcC,MAAM,YAoC3BC,MA3Bf,WAAgB,IAAD,EACavB,mBAAS,GADtB,mBACNwB,EADM,KACCC,EADD,KAEPC,EAAU5B,EAAY,WACtB6B,EAAY7B,EAAY,aAE9BQ,qBAAU,WACJoB,GACFD,GAAS,SAACG,GAAD,OAAUA,EAAO,KAExBD,GACFF,GAAS,SAACG,GAAD,OAAUA,EAAO,OAE3B,CAACF,EAASC,IAEb,IAAME,EAAgBC,mBAAQ,kBAAMC,KAAKC,IAAIR,EAAQ,KAAI,CAACA,IAE1D,OACE,yBAAKT,UAAU,aACb,yBAAKA,UAAU,wBACb,kBAACL,EAAD,CAAOE,KAAK,QAAQC,OAAQ,EAAGF,IAAKsB,MACpC,kBAAChB,EAAD,CAAQL,KAAK,QAAQC,OAAQ,EAAGqB,MAAO,CAAEC,MAAO,MAChD,kBAAChB,EAAD,CAAKC,SAAUS,OC9GHO,QACW,cAA7B7B,OAAO8B,SAASC,UAEe,UAA7B/B,OAAO8B,SAASC,UAEhB/B,OAAO8B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.50f28cea.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cloud.238f74a1.gif\";","module.exports = __webpack_public_path__ + \"static/media/dragon.b50ac62f.gif\";","import React, { useState, useEffect, useMemo } from \"react\";\nimport cloud from \"./cloud.gif\";\nimport dragon from \"./dragon.gif\";\nimport \"./App.css\";\n\n// Hook\nfunction useKeyPress(targetKey) {\n  // State for keeping track of whether key is pressed\n  const [keyPressed, setKeyPressed] = useState(false);\n\n  // If pressed key is our target key then set to true\n  function downHandler({ key }) {\n    if (key === targetKey) {\n      setKeyPressed(true);\n    }\n  }\n\n  // If released key is our target key then set to false\n  const upHandler = ({ key }) => {\n    if (key === targetKey) {\n      setKeyPressed(false);\n    }\n  };\n\n  // Add event listeners\n  useEffect(() => {\n    window.addEventListener(\"keydown\", downHandler);\n    window.addEventListener(\"keyup\", upHandler);\n    // Remove event listeners on cleanup\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  }, [downHandler, upHandler]); // Empty array ensures that effect is only run on mount and unmount\n\n  return keyPressed;\n}\n\nfunction Enemy({ src, name, number, ...rest }) {\n  return (\n    <img\n      src={src}\n      className=\"FF-Battle-Enemy1\"\n      alt={`${name} #${number}`}\n      {...rest}\n    />\n  );\n}\n\nfunction Player({ name, number, ...rest }) {\n  return (\n    <img\n      src={cloud}\n      className=\"FF-Battle-Player1\"\n      alt={`${name} #${number}`}\n      {...rest}\n    />\n  );\n}\n\nfunction Hud({ selected }) {\n  return (\n    <aside className=\"FF-Hud\">\n      <div className=\"FF-Hud-Panel\">\n        <ul>\n          <li className=\"FF-Hud-Panel-Action\">\n            <span\n              className={selected === 0 ? \"triangle\" : \"selectiable\"}\n            ></span>\n            <span>Attack</span>\n          </li>\n          <li className=\"FF-Hud-Panel-Action\">\n            <span\n              className={selected === 1 ? \"triangle\" : \"selectiable\"}\n            ></span>\n            <span>Magic</span>\n          </li>\n          <li className=\"FF-Hud-Panel-Action\">\n            <span\n              className={selected === 2 ? \"triangle\" : \"selectiable\"}\n            ></span>\n            <span>Items</span>\n          </li>\n        </ul>\n      </div>\n\n      <div className=\"FF-Hud-Panel\">\n        <ul>\n          <li className=\"FF-Hud-Panel-Player\">\n            <span className=\"selectiable\"></span>\n            <span className=\"name\">Cloud</span>\n            <span>389 / 440</span>\n            <meter id=\"active_time\" value=\"1.0\"></meter>\n          </li>\n        </ul>\n      </div>\n    </aside>\n  );\n}\n\n//const MENU = [[\"Attack\", \"Magic\", \"Items\"], [\"Cloud\"]];\nfunction App() {\n  const [count, setCount] = useState(0);\n  const upPress = useKeyPress(\"ArrowUp\");\n  const downPress = useKeyPress(\"ArrowDown\");\n\n  useEffect(() => {\n    if (upPress) {\n      setCount((prev) => prev + 1);\n    }\n    if (downPress) {\n      setCount((prev) => prev - 1);\n    }\n  }, [upPress, downPress]);\n\n  const selectedIndex = useMemo(() => Math.abs(count % 3), [count]);\n\n  return (\n    <div className=\"FF-Battle\">\n      <div className=\"FF-Battle-Background\">\n        <Enemy name=\"Enemy\" number={1} src={dragon} />\n        <Player name=\"Enemy\" number={1} style={{ right: 70 }} />\n        <Hud selected={selectedIndex} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}