{"version":3,"sources":["assets/cloud.gif","assets/dragon.gif","utils.js","useKeyPress.js","Hud.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getRandomIntInclusive","min","max","Math","ceil","floor","random","useKeyPress","targetKey","useState","keyPressed","setKeyPressed","downHandler","key","upHandler","useEffect","window","addEventListener","removeEventListener","memo","atb","onAttack","count","setCount","upPress","downPress","spacePress","isReady","prev","selected","useMemo","abs","active","console","log","className","style","transition","opacity","id","value","Enemy","src","name","number","isBeingHit","rest","animation","alt","Player","isAttacking","cloud","CLOUD","atbRate","DRAGON","App","player","setPlayer","enemy","setIsAttacking","setIsBeingHit","timer","setInterval","clearInterval","dragon","right","setTimeout","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4ca974b5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cloud.238f74a1.gif\";","module.exports = __webpack_public_path__ + \"static/media/dragon.b50ac62f.gif\";","export function getRandomIntInclusive(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive\n}\n","import { useState, useEffect } from \"react\";\n\n// Hook\nfunction useKeyPress(targetKey) {\n  // State for keeping track of whether key is pressed\n  const [keyPressed, setKeyPressed] = useState(false);\n\n  // If pressed key is our target key then set to true\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  function downHandler({ key }) {\n    if (key === targetKey) {\n      setKeyPressed(true);\n    }\n  }\n\n  // If released key is our target key then set to false\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const upHandler = ({ key }) => {\n    if (key === targetKey) {\n      setKeyPressed(false);\n    }\n  };\n\n  // Add event listeners\n  useEffect(() => {\n    window.addEventListener(\"keydown\", downHandler);\n    window.addEventListener(\"keyup\", upHandler);\n    // Remove event listeners on cleanup\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  }, [downHandler, upHandler]); // Empty array ensures that effect is only run on mount and unmount\n\n  return keyPressed;\n}\n\nexport default useKeyPress;\n","import React, { useState, useEffect, useMemo, memo } from \"react\";\nimport useKeyPress from \"./useKeyPress\";\n\n//const MENU = [[\"Attack\", \"Magic\", \"Items\"], [\"Cloud\"]];\n\nfunction Hud({ atb, onAttack }) {\n  const [count, setCount] = useState(0);\n  const upPress = useKeyPress(\"ArrowUp\");\n  const downPress = useKeyPress(\"ArrowDown\");\n  const spacePress = useKeyPress(\" \");\n  const isReady = atb >= 1.0;\n\n  useEffect(() => {\n    if (upPress) {\n      setCount((prev) => prev - 1);\n    }\n    if (downPress) {\n      setCount((prev) => prev + 1);\n    }\n  }, [upPress, downPress]);\n\n  const selected = useMemo(() => Math.abs(count % 3), [count]);\n\n  useEffect(() => {\n    let active = false;\n\n    if (isReady && spacePress && !active) {\n      active = true;\n      console.log(\"select \", selected);\n      if (selected === 0) {\n        onAttack();\n      }\n    }\n\n    return () => (active = false);\n  });\n\n  return (\n    <aside className=\"FF-Hud\">\n      <div className=\"FF-Hud-Panel\">\n        <ul\n          style={{ transition: \"all 200ms ease-out\", opacity: isReady ? 1 : 0 }}\n        >\n          <li className=\"FF-Hud-Panel-Action\">\n            <span\n              className={selected === 0 ? \"triangle\" : \"selectiable\"}\n            ></span>\n            <span>Attack</span>\n          </li>\n          <li className=\"FF-Hud-Panel-Action\">\n            <span\n              className={selected === 1 ? \"triangle\" : \"selectiable\"}\n            ></span>\n            <span>Magic</span>\n          </li>\n          <li className=\"FF-Hud-Panel-Action\">\n            <span\n              className={selected === 2 ? \"triangle\" : \"selectiable\"}\n            ></span>\n            <span>Items</span>\n          </li>\n        </ul>\n      </div>\n\n      <div className=\"FF-Hud-Panel\">\n        <ul>\n          <li className=\"FF-Hud-Panel-Player\">\n            <span className=\"selectiable\"></span>\n            <span className=\"name\">Cloud</span>\n            <span>389 / 440</span>\n            <meter id=\"active_time\" value={atb}></meter>\n          </li>\n        </ul>\n      </div>\n    </aside>\n  );\n}\n\nexport default memo(Hud);\n","import React, { useState, useEffect, useMemo, useRef } from \"react\";\nimport { getRandomIntInclusive } from \"./utils\";\nimport cloud from \"./assets/cloud.gif\";\nimport dragon from \"./assets/dragon.gif\";\nimport Hud from \"./Hud\";\nimport \"./App.css\";\n\nfunction Enemy({ src, name, number, isBeingHit, style, ...rest }) {\n  const animation = isBeingHit\n    ? \"damage 400ms linear\"\n    : \"idle infinite 4s linear\";\n  return (\n    <img\n      src={src}\n      className=\"FF-Battle-Enemy1\"\n      alt={`${name} #${number}`}\n      style={{ animation, ...style }}\n      {...rest}\n    />\n  );\n}\n\nfunction Player({ name, isAttacking, style, ...rest }) {\n  const animation = isAttacking\n    ? \"attack 2s linear\"\n    : \"idle infinite 4s linear\";\n  return (\n    <img\n      src={cloud}\n      className=\"FF-Battle-Player1\"\n      alt={name}\n      style={{ animation, ...style }}\n      {...rest}\n    />\n  );\n}\n\nconst TIME_PERIOD_CHECK = 800;\nconst CLOUD = {\n  name: \"CLOUD\",\n  atb: 0.0,\n  atbRate: [12, 21], // range\n};\nconst DRAGON = {\n  name: \"DRAGON\",\n  atb: 0.0,\n  atbRate: [8, 12], // range\n};\n\nfunction App() {\n  const [player, setPlayer] = useState(CLOUD);\n  const [enemy, setEnemy] = useState(DRAGON);\n  const [isAttacking, setIsAttacking] = useState([false, null]);\n  const [isBeingHit, setIsBeingHit] = useState([false, null]);\n\n  useEffect(() => {\n    let timer;\n    timer = setInterval(() => {\n      if (player.atb < 1.0) {\n        const value = getRandomIntInclusive(...player.atbRate) / 100;\n        setPlayer((prev) => ({ ...prev, atb: prev.atb + value }));\n      }\n    }, TIME_PERIOD_CHECK);\n\n    return () => {\n      clearInterval(timer);\n    };\n  }, [player.atb, player.atbRate]);\n\n  const handleAttack = () => {\n    setIsAttacking([true, player.name]);\n\n    setTimeout(() => {\n      setIsBeingHit([true, enemy.name]);\n    }, 1_000);\n\n    setTimeout(() => {\n      setPlayer((prev) => ({ ...prev, atb: 0.0 }));\n      setIsAttacking([false, player.name]);\n      setIsBeingHit([false, enemy.name]);\n    }, 2_000);\n  };\n\n  return (\n    <div className=\"FF-Battle\">\n      <div className=\"FF-Battle-Background\">\n        <Enemy\n          name={enemy.name}\n          number={1}\n          src={dragon}\n          isBeingHit={isBeingHit[0] && isBeingHit[1] === enemy.name}\n        />\n        <Player\n          name=\"CLOUD\"\n          style={{ right: 70 }}\n          isAttacking={isAttacking[0] && isAttacking[1] === player.name}\n        />\n        <Hud atb={player.atb} onAttack={handleAttack} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}